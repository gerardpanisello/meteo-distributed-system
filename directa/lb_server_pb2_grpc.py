# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import lb_server_pb2 as lb__server__pb2


class LB_serviceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendPollution = channel.unary_unary(
                '/LB_service/SendPollution',
                request_serializer=lb__server__pb2.Pollution.SerializeToString,
                response_deserializer=lb__server__pb2.BooleanResponse.FromString,
                )
        self.SendHumidity = channel.unary_unary(
                '/LB_service/SendHumidity',
                request_serializer=lb__server__pb2.Humidity.SerializeToString,
                response_deserializer=lb__server__pb2.BooleanResponse.FromString,
                )


class LB_serviceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendPollution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHumidity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LB_serviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendPollution': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPollution,
                    request_deserializer=lb__server__pb2.Pollution.FromString,
                    response_serializer=lb__server__pb2.BooleanResponse.SerializeToString,
            ),
            'SendHumidity': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHumidity,
                    request_deserializer=lb__server__pb2.Humidity.FromString,
                    response_serializer=lb__server__pb2.BooleanResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LB_service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LB_service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendPollution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LB_service/SendPollution',
            lb__server__pb2.Pollution.SerializeToString,
            lb__server__pb2.BooleanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendHumidity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LB_service/SendHumidity',
            lb__server__pb2.Humidity.SerializeToString,
            lb__server__pb2.BooleanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class Server_serviceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendPollution = channel.unary_unary(
                '/Server_service/SendPollution',
                request_serializer=lb__server__pb2.Pollution.SerializeToString,
                response_deserializer=lb__server__pb2.BooleanResponse.FromString,
                )
        self.SendHumidity = channel.unary_unary(
                '/Server_service/SendHumidity',
                request_serializer=lb__server__pb2.Humidity.SerializeToString,
                response_deserializer=lb__server__pb2.BooleanResponse.FromString,
                )


class Server_serviceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendPollution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendHumidity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_Server_serviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendPollution': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPollution,
                    request_deserializer=lb__server__pb2.Pollution.FromString,
                    response_serializer=lb__server__pb2.BooleanResponse.SerializeToString,
            ),
            'SendHumidity': grpc.unary_unary_rpc_method_handler(
                    servicer.SendHumidity,
                    request_deserializer=lb__server__pb2.Humidity.FromString,
                    response_serializer=lb__server__pb2.BooleanResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Server_service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Server_service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendPollution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server_service/SendPollution',
            lb__server__pb2.Pollution.SerializeToString,
            lb__server__pb2.BooleanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendHumidity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Server_service/SendHumidity',
            lb__server__pb2.Humidity.SerializeToString,
            lb__server__pb2.BooleanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
